{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dev/alzayat/Desktop/portfolio/ShadyAlzayat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/dev/alzayat/Desktop/portfolio/ShadyAlzayat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _assertThisInitialized from \"/Users/dev/alzayat/Desktop/portfolio/ShadyAlzayat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _toConsumableArray from \"/Users/dev/alzayat/Desktop/portfolio/ShadyAlzayat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/dev/alzayat/Desktop/portfolio/ShadyAlzayat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dev/alzayat/Desktop/portfolio/ShadyAlzayat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dev/alzayat/Desktop/portfolio/ShadyAlzayat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dev/alzayat/Desktop/portfolio/ShadyAlzayat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dev/alzayat/Desktop/portfolio/ShadyAlzayat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { __rest } from 'tslib';\nimport React from 'react';\nimport { matchPath, Redirect, Route, withRouter, BrowserRouter } from 'react-router-dom';\nimport { IonLifeCycleContext, DefaultIonLifeCycleContext, NavContext } from '@ionic/react';\n\nvar generateUniqueId = function generateUniqueId() {\n  var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n  var charPool = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  var charArray = [];\n\n  for (var i = 0; i < length; i++) {\n    charArray.push(charPool[Math.floor(Math.random() * charPool.length)]);\n  }\n\n  return charArray.join('');\n};\n\nvar ViewInternal =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ViewInternal, _React$Component);\n\n  function ViewInternal(props) {\n    var _this;\n\n    _classCallCheck(this, ViewInternal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ViewInternal).call(this, props));\n    _this.state = {\n      ref: null\n    };\n    return _this;\n  }\n\n  _createClass(ViewInternal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var forwardedRef = this.props.forwardedRef;\n      this.setState({\n        ref: forwardedRef\n      });\n\n      if (forwardedRef && forwardedRef.current) {\n        forwardedRef.current.addEventListener('ionViewWillEnter', this.ionViewWillEnterHandler.bind(this));\n        forwardedRef.current.addEventListener('ionViewDidEnter', this.ionViewDidEnterHandler.bind(this));\n        forwardedRef.current.addEventListener('ionViewWillLeave', this.ionViewWillLeaveHandler.bind(this));\n        forwardedRef.current.addEventListener('ionViewDidLeave', this.ionViewDidLeaveHandler.bind(this));\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var forwardedRef = this.props.forwardedRef;\n\n      if (forwardedRef && forwardedRef.current) {\n        forwardedRef.current.removeEventListener('ionViewWillEnter', this.ionViewWillEnterHandler.bind(this));\n        forwardedRef.current.removeEventListener('ionViewDidEnter', this.ionViewDidEnterHandler.bind(this));\n        forwardedRef.current.removeEventListener('ionViewWillLeave', this.ionViewWillLeaveHandler.bind(this));\n        forwardedRef.current.removeEventListener('ionViewDidLeave', this.ionViewDidLeaveHandler.bind(this));\n      }\n    }\n  }, {\n    key: \"ionViewWillEnterHandler\",\n    value: function ionViewWillEnterHandler() {\n      this.context.ionViewWillEnter();\n    }\n  }, {\n    key: \"ionViewDidEnterHandler\",\n    value: function ionViewDidEnterHandler() {\n      this.context.ionViewDidEnter();\n    }\n  }, {\n    key: \"ionViewWillLeaveHandler\",\n    value: function ionViewWillLeaveHandler() {\n      this.context.ionViewWillLeave();\n    }\n  }, {\n    key: \"ionViewDidLeaveHandler\",\n    value: function ionViewDidLeaveHandler() {\n      this.context.ionViewDidLeave();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          className = _a.className,\n          children = _a.children,\n          forwardedRef = _a.forwardedRef,\n          rest = __rest(_a, [\"className\", \"children\", \"forwardedRef\"]);\n\n      var ref = this.state.ref;\n      return React.createElement(\"div\", Object.assign({\n        className: className ? \"ion-page \".concat(className) : 'ion-page',\n        ref: forwardedRef\n      }, rest), ref && children);\n    }\n  }], [{\n    key: \"contextType\",\n    get: function get() {\n      return IonLifeCycleContext;\n    }\n  }]);\n\n  return ViewInternal;\n}(React.Component);\n\nfunction forwardRef(props, ref) {\n  return React.createElement(ViewInternal, Object.assign({\n    forwardedRef: ref\n  }, props));\n}\n\nforwardRef.displayName = 'View';\nvar View =\n/*@__PURE__*/\nReact.forwardRef(forwardRef);\nvar RouteManagerContext =\n/*@__PURE__*/\nReact.createContext({\n  viewStacks: {},\n  hideView: function hideView() {\n    navContextNotFoundError();\n  },\n  setupIonRouter: function setupIonRouter() {\n    navContextNotFoundError();\n  },\n  removeViewStack: function removeViewStack() {\n    navContextNotFoundError();\n  },\n  renderChild: function renderChild() {\n    navContextNotFoundError();\n  },\n  transitionView: function transitionView() {\n    navContextNotFoundError();\n  }\n});\n\nfunction navContextNotFoundError() {\n  console.error('IonReactRouter not found, did you add it to the app?');\n}\n\nvar ViewItemManager =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(ViewItemManager, _React$Component2);\n\n  function ViewItemManager(props) {\n    var _this2;\n\n    _classCallCheck(this, ViewItemManager);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(ViewItemManager).call(this, props));\n    _this2.ionLifeCycleContext = new DefaultIonLifeCycleContext();\n    _this2._isMounted = false;\n    _this2.state = {\n      show: true\n    };\n\n    _this2.ionLifeCycleContext.onComponentCanBeDestroyed(function () {\n      if (!_this2.props.mount) {\n        if (_this2._isMounted) {\n          _this2.setState({\n            show: false\n          }, function () {\n            _this2.context.hideView(_this2.props.id);\n          });\n        }\n      }\n    });\n\n    return _this2;\n  }\n\n  _createClass(ViewItemManager, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._isMounted = true;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var show = this.state.show;\n      return React.createElement(IonLifeCycleContext.Provider, {\n        value: this.ionLifeCycleContext\n      }, show && this.props.children);\n    }\n  }], [{\n    key: \"contextType\",\n    get: function get() {\n      return RouteManagerContext;\n    }\n  }]);\n\n  return ViewItemManager;\n}(React.Component);\n\nvar ViewManager =\n/*#__PURE__*/\nfunction (_React$Component3) {\n  _inherits(ViewManager, _React$Component3);\n\n  function ViewManager(props) {\n    var _this3;\n\n    _classCallCheck(this, ViewManager);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(ViewManager).call(this, props));\n    _this3.containerEl = React.createRef();\n    _this3.id = _this3.props.id || generateUniqueId();\n    return _this3;\n  }\n\n  _createClass(ViewManager, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.context.setupIonRouter(this.id, this.props.children, this.containerEl.current);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.context.removeViewStack(this.id);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var context = this.context;\n      var viewStack = context.viewStacks[this.id];\n      var activeId = viewStack ? viewStack.activeId : '';\n      var views = (viewStack || {\n        views: []\n      }).views.filter(function (x) {\n        return x.show;\n      });\n      return React.createElement(\"ion-router-outlet\", {\n        \"data-id\": this.id,\n        ref: this.containerEl\n      }, views.map(function (item) {\n        var props = {};\n\n        if (item.id === activeId) {\n          props = {\n            'className': ' ion-page-invisible'\n          };\n        }\n\n        return React.createElement(ViewItemManager, {\n          id: item.id,\n          key: item.key,\n          mount: item.mount\n        }, React.createElement(View, Object.assign({\n          ref: item.ref\n        }, props), _this4.context.renderChild(item)));\n      }));\n    }\n  }], [{\n    key: \"contextType\",\n    get: function get() {\n      return RouteManagerContext;\n    }\n  }]);\n\n  return ViewManager;\n}(React.Component);\n\nvar RESTRICT_SIZE = 25;\n\nvar LocationHistory =\n/*#__PURE__*/\nfunction () {\n  function LocationHistory() {\n    _classCallCheck(this, LocationHistory);\n\n    this.locationHistory = [];\n  }\n\n  _createClass(LocationHistory, [{\n    key: \"add\",\n    value: function add(location) {\n      this.locationHistory.push(location);\n\n      if (this.locationHistory.length > RESTRICT_SIZE) {\n        this.locationHistory.splice(0, 10);\n      }\n    }\n  }, {\n    key: \"findLastLocation\",\n    value: function findLastLocation(url) {\n      var reversedLocations = _toConsumableArray(this.locationHistory).reverse();\n\n      var last = reversedLocations.find(function (x) {\n        return x.pathname.toLowerCase() === url.toLowerCase();\n      });\n      return last;\n    }\n  }]);\n\n  return LocationHistory;\n}();\n\nvar NavManager =\n/*#__PURE__*/\nfunction (_React$Component4) {\n  _inherits(NavManager, _React$Component4);\n\n  function NavManager(props) {\n    var _this5;\n\n    _classCallCheck(this, NavManager);\n\n    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(NavManager).call(this, props));\n    _this5.locationHistory = new LocationHistory();\n    _this5.state = {\n      goBack: _this5.goBack.bind(_assertThisInitialized(_this5)),\n      hasIonicRouter: function hasIonicRouter() {\n        return true;\n      },\n      getHistory: _this5.getHistory.bind(_assertThisInitialized(_this5)),\n      getLocation: _this5.getLocation.bind(_assertThisInitialized(_this5)),\n      navigate: _this5.navigate.bind(_assertThisInitialized(_this5)),\n      getViewManager: _this5.getViewManager.bind(_assertThisInitialized(_this5)),\n      currentPath: _this5.props.location.pathname\n    };\n    _this5.listenUnregisterCallback = _this5.props.history.listen(function (location) {\n      _this5.setState({\n        currentPath: location.pathname\n      });\n\n      _this5.locationHistory.add(location);\n    });\n\n    _this5.locationHistory.add({\n      hash: window.location.hash,\n      key: generateUniqueId(6),\n      pathname: window.location.pathname,\n      search: window.location.search,\n      state: {}\n    });\n\n    return _this5;\n  }\n\n  _createClass(NavManager, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.listenUnregisterCallback) {\n        this.listenUnregisterCallback();\n      }\n    }\n  }, {\n    key: \"goBack\",\n    value: function goBack(defaultHref) {\n      var _this$props$findViewI = this.props.findViewInfoByLocation(this.props.location),\n          leavingView = _this$props$findViewI.view;\n\n      if (leavingView) {\n        var _this$props$findViewI2 = this.props.findViewInfoById(leavingView.prevId),\n            enteringView = _this$props$findViewI2.view;\n\n        if (enteringView) {\n          var lastLocation = this.locationHistory.findLastLocation(enteringView.routeData.match.url);\n\n          if (lastLocation) {\n            this.props.history.replace(lastLocation.pathname + lastLocation.search, {\n              direction: 'back'\n            });\n          } else {\n            this.props.history.replace(enteringView.routeData.match.url, {\n              direction: 'back'\n            });\n          }\n        } else {\n          defaultHref && this.props.history.replace(defaultHref, {\n            direction: 'back'\n          });\n        }\n      } else {\n        defaultHref && this.props.history.replace(defaultHref, {\n          direction: 'back'\n        });\n      }\n    }\n  }, {\n    key: \"getHistory\",\n    value: function getHistory() {\n      return this.props.history;\n    }\n  }, {\n    key: \"getLocation\",\n    value: function getLocation() {\n      return this.props.location;\n    }\n  }, {\n    key: \"navigate\",\n    value: function navigate(path, direction) {\n      this.props.history.push(path, {\n        direction: direction\n      });\n    }\n  }, {\n    key: \"getViewManager\",\n    value: function getViewManager() {\n      return ViewManager;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(NavContext.Provider, {\n        value: this.state\n      }, this.props.children);\n    }\n  }]);\n\n  return NavManager;\n}(React.Component);\n\nvar RouteManager =\n/*#__PURE__*/\nfunction (_React$Component5) {\n  _inherits(RouteManager, _React$Component5);\n\n  function RouteManager(props) {\n    var _this6;\n\n    _classCallCheck(this, RouteManager);\n\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(RouteManager).call(this, props));\n    _this6.listenUnregisterCallback = _this6.props.history.listen(_this6.historyChange.bind(_assertThisInitialized(_this6)));\n    _this6.state = {\n      viewStacks: {},\n      hideView: _this6.hideView.bind(_assertThisInitialized(_this6)),\n      setupIonRouter: _this6.setupIonRouter.bind(_assertThisInitialized(_this6)),\n      removeViewStack: _this6.removeViewStack.bind(_assertThisInitialized(_this6)),\n      renderChild: _this6.renderChild.bind(_assertThisInitialized(_this6)),\n      transitionView: _this6.transitionView.bind(_assertThisInitialized(_this6))\n    };\n    return _this6;\n  }\n\n  _createClass(RouteManager, [{\n    key: \"hideView\",\n    value: function hideView(viewId) {\n      var viewStacks = Object.assign({}, this.state.viewStacks);\n\n      var _this$findViewInfoByI = this.findViewInfoById(viewId, viewStacks),\n          view = _this$findViewInfoByI.view;\n\n      if (view) {\n        view.show = false;\n        view.key = generateUniqueId();\n        this.setState({\n          viewStacks: viewStacks\n        });\n      }\n    }\n  }, {\n    key: \"historyChange\",\n    value: function historyChange(location, action) {\n      this.setActiveView(location, action);\n    }\n  }, {\n    key: \"findViewInfoByLocation\",\n    value: function findViewInfoByLocation(location, viewStacks) {\n      var view;\n      var match;\n      var viewStack;\n      var keys = Object.keys(viewStacks);\n      keys.some(function (key) {\n        var vs = viewStacks[key];\n        return vs.views.some(function (x) {\n          var matchProps = {\n            exact: x.routeData.childProps.exact,\n            path: x.routeData.childProps.path || x.routeData.childProps.from,\n            component: x.routeData.childProps.component\n          };\n          match = matchPath(location.pathname, matchProps);\n\n          if (match) {\n            view = x;\n            viewStack = vs;\n            return true;\n          }\n\n          return false;\n        });\n      });\n      var result = {\n        view: view,\n        viewStack: viewStack,\n        match: match\n      };\n      return result;\n    }\n  }, {\n    key: \"findViewInfoById\",\n    value: function findViewInfoById(id, viewStacks) {\n      var view;\n      var viewStack;\n      var keys = Object.keys(viewStacks);\n      keys.some(function (key) {\n        var vs = viewStacks[key];\n        view = vs.views.find(function (x) {\n          return x.id === id;\n        });\n\n        if (view) {\n          viewStack = vs;\n          return true;\n        } else {\n          return false;\n        }\n      });\n      return {\n        view: view,\n        viewStack: viewStack\n      };\n    }\n  }, {\n    key: \"setActiveView\",\n    value: function setActiveView(location, action) {\n      var _this7 = this;\n\n      var viewStacks = Object.assign({}, this.state.viewStacks);\n\n      var _this$findViewInfoByL = this.findViewInfoByLocation(location, viewStacks),\n          enteringView = _this$findViewInfoByL.view,\n          enteringViewStack = _this$findViewInfoByL.viewStack,\n          match = _this$findViewInfoByL.match;\n\n      var direction = location.state && location.state.direction;\n\n      if (!enteringViewStack) {\n        return;\n      }\n\n      var _this$findViewInfoByI2 = this.findViewInfoById(this.activeViewId, viewStacks),\n          leavingView = _this$findViewInfoByI2.view;\n\n      if (leavingView && leavingView.routeData.match.url === location.pathname) {\n        return;\n      }\n\n      if (enteringView) {\n        /**\n         * If the page is being pushed into the stack by another view,\n         * record the view that originally directed to the new view for back button purposes.\n         */\n        if (!enteringView.show && action === 'PUSH') {\n          enteringView.prevId = leavingView && leavingView.id;\n        }\n\n        enteringView.show = true;\n        enteringView.mount = true;\n        enteringView.routeData.match = match;\n        enteringViewStack.activeId = enteringView.id;\n        this.activeViewId = enteringView.id;\n\n        if (leavingView) {\n          this.prevViewId = leavingView.id;\n\n          if (leavingView.routeData.match.params.tab === enteringView.routeData.match.params.tab) {\n            if (action === 'PUSH') {\n              direction = direction || 'forward';\n            } else {\n              direction = direction || 'back';\n              leavingView.mount = false;\n            }\n          }\n          /**\n           * If the leaving view is a Redirect, take it out of the rendering phase.\n           */\n\n\n          if (leavingView.element.type === Redirect) {\n            leavingView.mount = false;\n            leavingView.show = false;\n          }\n\n          if (leavingView.element.type === Route && leavingView.element.props.render) {\n            if (leavingView.element.props.render().type === Redirect) {\n              leavingView.mount = false;\n              leavingView.show = false;\n            }\n          } else if (leavingView.element.type === Redirect) {\n            leavingView.mount = false;\n            leavingView.show = false;\n          }\n        }\n\n        this.setState({\n          viewStacks: viewStacks\n        }, function () {\n          var enteringEl = enteringView.ref && enteringView.ref.current ? enteringView.ref.current : undefined;\n          var leavingEl = leavingView && leavingView.ref && leavingView.ref.current ? leavingView.ref.current : undefined;\n\n          _this7.transitionView(enteringEl, leavingEl, enteringViewStack.routerOutlet, leavingEl && leavingEl.innerHTML !== '' ? direction : undefined); // Don't animate from an empty view\n\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.listenUnregisterCallback && this.listenUnregisterCallback();\n    }\n  }, {\n    key: \"setupIonRouter\",\n    value: function setupIonRouter(id, children, routerOutlet) {\n      var _this8 = this;\n\n      var views = [];\n      var activeId;\n      var ionRouterOutlet = React.Children.only(children);\n      React.Children.forEach(ionRouterOutlet.props.children, function (child) {\n        views.push(createViewItem(child, _this8.props.history.location));\n      });\n      this.registerViewStack(id, activeId, views, routerOutlet, this.props.location);\n\n      function createViewItem(child, location) {\n        var viewId = generateUniqueId();\n        var key = generateUniqueId();\n        var element = child;\n        var matchProps = {\n          exact: child.props.exact,\n          path: child.props.path || child.props.from,\n          component: child.props.component\n        };\n        var match = matchPath(location.pathname, matchProps);\n        var view = {\n          id: viewId,\n          key: key,\n          routeData: {\n            match: match,\n            childProps: child.props\n          },\n          element: element,\n          mount: true,\n          show: !!match,\n          ref: React.createRef()\n        };\n\n        if (!!match) {\n          activeId = viewId;\n        }\n\n        return view;\n      }\n    }\n  }, {\n    key: \"registerViewStack\",\n    value: function registerViewStack(stack, activeId, stackItems, routerOutlet, location) {\n      var _this9 = this;\n\n      this.setState(function (prevState) {\n        var prevViewStacks = Object.assign({}, prevState.viewStacks);\n        prevViewStacks[stack] = {\n          activeId: activeId,\n          views: stackItems,\n          routerOutlet: routerOutlet\n        };\n        return {\n          viewStacks: prevViewStacks\n        };\n      }, function () {\n        var _this9$findViewInfoBy = _this9.findViewInfoById(activeId, _this9.state.viewStacks),\n            activeView = _this9$findViewInfoBy.view;\n\n        if (activeView) {\n          _this9.prevViewId = _this9.activeViewId;\n          _this9.activeViewId = activeView.id;\n          var direction = location.state && location.state.direction;\n\n          var _this9$findViewInfoBy2 = _this9.findViewInfoById(_this9.prevViewId, _this9.state.viewStacks),\n              prevView = _this9$findViewInfoBy2.view;\n\n          _this9.transitionView(activeView.ref.current, prevView && prevView.ref.current || undefined, routerOutlet, direction);\n        }\n      });\n    }\n  }, {\n    key: \"removeViewStack\",\n    value: function removeViewStack(stack) {\n      var viewStacks = Object.assign({}, this.state.viewStacks);\n      delete viewStacks[stack];\n      this.setState({\n        viewStacks: viewStacks\n      });\n    }\n  }, {\n    key: \"renderChild\",\n    value: function renderChild(item) {\n      var component = React.cloneElement(item.element, {\n        computedMatch: item.routeData.match\n      });\n      return component;\n    }\n  }, {\n    key: \"findActiveView\",\n    value: function findActiveView(views) {\n      var _this10 = this;\n\n      var view;\n      views.some(function (x) {\n        var match = matchPath(_this10.props.location.pathname, x.routeData.childProps);\n\n        if (match) {\n          view = x;\n          return true;\n        }\n\n        return false;\n      });\n      return view;\n    }\n  }, {\n    key: \"transitionView\",\n    value: function transitionView(enteringEl, leavingEl, ionRouterOuter, direction) {\n      var _this11 = this;\n\n      /**\n       * Super hacky workaround to make sure ionRouterOutlet is available\n       * since transitionView might be called before IonRouterOutlet is fully mounted\n       */\n      if (ionRouterOuter && ionRouterOuter.componentOnReady) {\n        this.commitView(enteringEl, leavingEl, ionRouterOuter, direction);\n      } else {\n        setTimeout(function () {\n          _this11.transitionView(enteringEl, leavingEl, ionRouterOuter, direction);\n        }, 10);\n      }\n    }\n  }, {\n    key: \"commitView\",\n    value: function () {\n      var _commitView = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(enteringEl, leavingEl, ionRouterOuter, direction) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return ionRouterOuter.commit(enteringEl, leavingEl, {\n                  deepWait: true,\n                  duration: direction === undefined ? 0 : undefined,\n                  direction: direction,\n                  showGoBack: direction === 'forward',\n                  progressAnimation: false\n                });\n\n              case 2:\n                if (leavingEl && enteringEl !== leavingEl) {\n                  /**\n                   *  add hidden attributes\n                  */\n                  leavingEl.classList.add('ion-page-hidden');\n                  leavingEl.setAttribute('aria-hidden', 'true');\n                }\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function commitView(_x, _x2, _x3, _x4) {\n        return _commitView.apply(this, arguments);\n      }\n\n      return commitView;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this12 = this;\n\n      return React.createElement(RouteManagerContext.Provider, {\n        value: this.state\n      }, React.createElement(NavManager, Object.assign({}, this.props, {\n        findViewInfoById: function findViewInfoById(id) {\n          return _this12.findViewInfoById(id, _this12.state.viewStacks);\n        },\n        findViewInfoByLocation: function findViewInfoByLocation(location) {\n          return _this12.findViewInfoByLocation(location, _this12.state.viewStacks);\n        }\n      }), this.props.children));\n    }\n  }]);\n\n  return RouteManager;\n}(React.Component);\n\nvar RouteManagerWithRouter = withRouter(RouteManager);\nRouteManagerWithRouter.displayName = 'RouteManager';\n\nvar IonReactRouter =\n/*#__PURE__*/\nfunction (_React$Component6) {\n  _inherits(IonReactRouter, _React$Component6);\n\n  function IonReactRouter() {\n    _classCallCheck(this, IonReactRouter);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(IonReactRouter).apply(this, arguments));\n  }\n\n  _createClass(IonReactRouter, [{\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          children = _a.children,\n          props = __rest(_a, [\"children\"]);\n\n      return React.createElement(BrowserRouter, Object.assign({}, props), React.createElement(RouteManagerWithRouter, null, children));\n    }\n  }]);\n\n  return IonReactRouter;\n}(React.Component);\n\nexport { IonReactRouter, ViewManager };","map":null,"metadata":{},"sourceType":"module"}